#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_PELANGGAN 100
#define MAX_LAUNDRY 100

// Enum untuk status laundry
typedef enum {
    BELUM_DIKONFIRMASI,
    SEDANG_DIKERJAKAN,
    SELESAI
} StatusLaundry;

typedef struct {
    char username[50];
    char password[50];
    double saldo;
    int frekuensi;
} Pelanggan;

typedef struct {
    char jenis[50];
    int durasi;
    double berat;
    double harga;
    StatusLaundry status;
    char username[50];
    int frekuensi;
} Laundry;

// Variabel global
int pelangganIndexLogin = -1; // Variabel global untuk menyimpan indeks pelanggan yang sedang login


// Urutan deklarasi fungsi dengan fungsi-fungsinya
void bersihkanLayar();

void simpanDataPelanggan(Pelanggan *pelanggan, int jumlahPelanggan);
void bacaDataPelanggan(Pelanggan *pelanggan, int *jumlahPelanggan);
void simpanDataLaundry(Laundry *laundry, int jumlahLaundry);
void bacaDataLaundry(Laundry *laundry, int *jumlahLaundry);

void loginAdmin(Pelanggan *dataPelanggan, Laundry *dataLaundry, int *jumlahPelanggan, int *jumlahLaundry);
void loginPelanggan(Pelanggan *dataPelanggan, Laundry *dataLaundry, int *jumlahPelanggan, int *jumlahLaundry);
void daftarPelanggan(Pelanggan *dataPelanggan, int *jumlahPelanggan);
int cekUsernamePelanggan(Pelanggan *dataPelanggan, int jumlahPelanggan, const char *username);
int cekLoginPelanggan(Pelanggan *dataPelanggan, int jumlahPelanggan, const char *username, const char *password);

// fungsi pada menu customer atau pelanggan
void isiSaldo(Pelanggan *dataPelanggan, Laundry *dataLaundry, int jumlahPelanggan, int *jumlahLaundry);
void setorLaundry(Pelanggan *dataPelanggan, Laundry *dataLaundry, int jumlahPelanggan, int *jumlahLaundry);
void lihatStatusLaundry(Pelanggan *dataPelanggan, Laundry *dataLaundry, int jumlahPelanggan, int jumlahLaundry);
void cekHarga();

// fungsi pada menu admin
void hapusPelanggan(Pelanggan *dataPelanggan, int *jumlahPelanggan);
void lihatPendapatan(Laundry *dataLaundry, int jumlahLaundry);
void perbaruiStatusLaundry(Laundry *dataLaundry, Pelanggan *dataPelanggan, int jumlahLaundry);
void lihatHistoriPelanggan(Pelanggan *dataPelanggan, Laundry *dataLaundry, int jumlahPelanggan, int jumlahLaundry);

void tampilkanMenuAdmin();
void tampilkanMenuPelanggan();

// Fungsi utama
int main() {
    // Inisialisasi data dan variabel global
    Pelanggan dataPelanggan[MAX_PELANGGAN];
    Laundry dataLaundry[MAX_LAUNDRY];
    int jumlahPelanggan = 0;
    int jumlahLaundry = 0;

    // Membaca data pelanggan dan laundry dari file
    bacaDataPelanggan(dataPelanggan, &jumlahPelanggan);
    bacaDataLaundry(dataLaundry, &jumlahLaundry);

    while (1) {
        bersihkanLayar();
        int tipePengguna;
        printf("Selamat datang di D'Laundry\n");
        printf("Pilih tipe pengguna:\n");
        printf("1. Admin\n");
        printf("2. Pelanggan\n");
        printf("3. Keluar\n");
        printf("Masukkan pilihan Anda: ");
        scanf("%d", &tipePengguna);

        switch (tipePengguna) {
            case 1:
                loginAdmin(dataPelanggan, dataLaundry, &jumlahPelanggan, &jumlahLaundry);
                break;
            case 2:
                // Tampilkan opsi untuk pelanggan (login/daftar)
                printf("Pilih opsi pelanggan:\n");
                printf("1. Login\n");
                printf("2. Daftar\n");
                printf("Masukkan pilihan Anda: ");
                int opsiPelanggan;
                scanf("%d", &opsiPelanggan);

                if (opsiPelanggan == 1) {
                    // Login sebagai pelanggan
                    loginPelanggan(dataPelanggan, dataLaundry, &jumlahPelanggan, &jumlahLaundry);
                } else if (opsiPelanggan == 2) {
                    // Daftar sebagai pelanggan
                    daftarPelanggan(dataPelanggan, &jumlahPelanggan);
                } else {
                    printf("Pilihan tidak valid. Silakan coba lagi.\n");
                }
                break;
            case 3:
                printf("Terima kasih telah menggunakan D'Laundry.\n");
                simpanDataPelanggan(dataPelanggan, jumlahPelanggan);
                simpanDataLaundry(dataLaundry, jumlahLaundry);
                return 0;
            default:
                printf("Pilihan tidak valid. Silakan coba lagi.\n");
        }
    }
}


//==============Memulai fungsi-fungsi yang ada=================

void bersihkanLayar() {
#ifdef _WIN32
    system("cls");
#else
    system("clear");
#endif
}

void simpanDataPelanggan(Pelanggan *pelanggan, int jumlahPelanggan) {
    FILE *filePelanggan = fopen("pelanggan.dat", "wb");
    if (filePelanggan == NULL) {
        printf("Gagal membuka file pelanggan.\n");
        exit(1);
    }

    fwrite(&jumlahPelanggan, sizeof(int), 1, filePelanggan);
    fwrite(pelanggan, sizeof(Pelanggan), jumlahPelanggan, filePelanggan);
    fclose(filePelanggan);
}

void bacaDataPelanggan(Pelanggan *pelanggan, int *jumlahPelanggan) {
    FILE *filePelanggan = fopen("pelanggan.dat", "rb");
    if (filePelanggan == NULL) {
        printf("Gagal membuka file pelanggan.\n");
        return;
    }

    fread(jumlahPelanggan, sizeof(int), 1, filePelanggan);
    fread(pelanggan, sizeof(Pelanggan), *jumlahPelanggan, filePelanggan);
    fclose(filePelanggan);
}

void simpanDataLaundry(Laundry *laundry, int jumlahLaundry) {
    FILE *fileLaundry = fopen("laundry.dat", "wb");
    if (fileLaundry == NULL) {
        printf("Gagal membuka file laundry.\n");
        exit(1);
    }

    fwrite(&jumlahLaundry, sizeof(int), 1, fileLaundry);
    fwrite(laundry, sizeof(Laundry), jumlahLaundry, fileLaundry);
    fclose(fileLaundry);
}

void bacaDataLaundry(Laundry *laundry, int *jumlahLaundry) {
    FILE *fileLaundry = fopen("laundry.dat", "rb");
    if (fileLaundry == NULL) {
        printf("Gagal membuka file laundry.\n");
        return;
    }

    fread(jumlahLaundry, sizeof(int), 1, fileLaundry);
    fread(laundry, sizeof(Laundry), *jumlahLaundry, fileLaundry);
    fclose(fileLaundry);
}

// Fungsi loginAdmin dengan rekursif
void loginAdmin(Pelanggan *dataPelanggan, Laundry *dataLaundry, int *jumlahPelanggan, int *jumlahLaundry) {
    char username[50];
    char password[50];
    int loginSuccess = 0;
    int attempt = 0;
    const char adminUsername[] = "admin";
    const char adminPassword[] = "admin123";

    do {
        printf("Masukkan username: ");
        scanf("%s", username);
        printf("Masukkan password: ");
        scanf("%s", password);

        if (strcmp(username, adminUsername) == 0 && strcmp(password, adminPassword) == 0) {
            printf("Login berhasil!\n");
            loginSuccess = 1;
        } else {
            printf("Login gagal. Silakan coba lagi.\n");
            attempt++;
        }
    } while (!loginSuccess && attempt < 3);

    if (!loginSuccess) {
        printf("Anda telah melebihi batas percobaan login. Aplikasi akan keluar.\n");
        simpanDataPelanggan(dataPelanggan, *jumlahPelanggan);
        simpanDataLaundry(dataLaundry, *jumlahLaundry);
        exit(0);
    }

    // Tampilkan menu admin setelah login
    int opsiAdmin;
    do {
        tampilkanMenuAdmin();
        scanf("%d", &opsiAdmin);

        switch (opsiAdmin) {

            case 1:
                hapusPelanggan(dataPelanggan, jumlahPelanggan);
                break;
            case 2:
                lihatPendapatan(dataLaundry, *jumlahLaundry);
                break;
            case 3:
                perbaruiStatusLaundry(dataLaundry, dataPelanggan, *jumlahLaundry);
                break;
            case 4:
                lihatHistoriPelanggan(dataPelanggan, dataLaundry, *jumlahPelanggan, *jumlahLaundry);
                break;
            case 5:
                printf("Keluar dari akun admin.\n");
                break;
            default:
                printf("Pilihan tidak valid. Silakan coba lagi.\n");
        }
    } while (opsiAdmin != 5);
}

// Fungsi loginPelanggan dengan rekursif
void loginPelanggan(Pelanggan *dataPelanggan, Laundry *dataLaundry, int *jumlahPelanggan, int *jumlahLaundry) {
    char username[50];
    char password[50];
    int loginSuccess = 0;
    int attempt = 0;

    do {
        printf("Masukkan username: ");
        scanf("%s", username);
        printf("Masukkan password: ");
        scanf("%s", password);

        loginSuccess = cekLoginPelanggan(dataPelanggan, *jumlahPelanggan, username, password);

        if (loginSuccess) {
            for (int i = 0; i < *jumlahPelanggan; i++) {
                if (strcmp(dataPelanggan[i].username, username) == 0) {
                    pelangganIndexLogin = i; // Menyimpan indeks pelanggan yang sedang login
                    break;
                }
            }
        }

        if (!loginSuccess) {
            printf("Login gagal. Silakan coba lagi.\n");
            attempt++;
        }
    } while (!loginSuccess && attempt < 3);

    if (!loginSuccess) {
        printf("Anda telah melebihi batas percobaan login. Aplikasi akan keluar.\n");
        simpanDataPelanggan(dataPelanggan, *jumlahPelanggan);
        simpanDataLaundry(dataLaundry, *jumlahLaundry);
        exit(0);
    }

    // Tampilkan menu pelanggan setelah login
    int opsiPelanggan;
    do {
        tampilkanMenuPelanggan();
        scanf("%d", &opsiPelanggan);

        switch (opsiPelanggan) {
            case 1:
                isiSaldo(dataPelanggan, dataLaundry, *jumlahPelanggan, jumlahLaundry);
                break;
            case 2:
                setorLaundry(dataPelanggan, dataLaundry, *jumlahPelanggan, jumlahLaundry);
                break;
            case 3:
                lihatStatusLaundry(dataPelanggan, dataLaundry, *jumlahPelanggan, *jumlahLaundry);
                break;
            case 4:
                cekHarga();
                break;
            case 5:
                printf("Keluar dari akun pelanggan.\n");
                break;
            default:
                printf("Pilihan tidak valid. Silakan coba lagi.\n");
        }
    } while (opsiPelanggan != 5);
}


// Fungsi daftarPelanggan dengan rekursif
void daftarPelanggan(Pelanggan *dataPelanggan, int *jumlahPelanggan) {
    printf("Masukkan username: ");
    scanf("%s", dataPelanggan[*jumlahPelanggan].username);

    // Validasi username, pastikan belum ada yang menggunakan
    while (cekUsernamePelanggan(dataPelanggan, *jumlahPelanggan, dataPelanggan[*jumlahPelanggan].username)) {
        printf("Username sudah digunakan. Masukkan username lain: ");
        scanf("%s", dataPelanggan[*jumlahPelanggan].username);
    }

    printf("Masukkan password: ");
    scanf("%s", dataPelanggan[*jumlahPelanggan].password);
    dataPelanggan[*jumlahPelanggan].saldo = 0;

    (*jumlahPelanggan)++;

    // Rekursi untuk menambah pelanggan baru atau keluar
    char tambahLagi;
    printf("Tambah pelanggan lagi? (y/n): ");
    scanf(" %c", &tambahLagi);

    if (tambahLagi == 'y' || tambahLagi == 'Y') {
        daftarPelanggan(dataPelanggan, jumlahPelanggan);
    }
}

int cekUsernamePelanggan(Pelanggan *dataPelanggan, int jumlahPelanggan, const char *username) {
    for (int i = 0; i < jumlahPelanggan; i++) {
        if (strcmp(dataPelanggan[i].username, username) == 0) {
            return 1; // True, username sudah ada
        }
    }
    return 0; // False, username belum ada
}

int cekLoginPelanggan(Pelanggan *dataPelanggan, int jumlahPelanggan, const char *username, const char *password) {
    for (int i = 0; i < jumlahPelanggan; i++) {
        if (strcmp(dataPelanggan[i].username, username) == 0 && strcmp(dataPelanggan[i].password, password) == 0) {
            return 1; // True, login sukses
        }
    }
    return 0; // False, login gagal
}

// Modifikasi fungsi isiSaldo
void isiSaldo(Pelanggan *dataPelanggan, Laundry *dataLaundry, int jumlahPelanggan, int *jumlahLaundry) {
    if (pelangganIndexLogin != -1) {
        int pilihan;
        printf("Pilih opsi:\n");
        printf("1. Isi Saldo\n");
        printf("2. Cek Saldo\n");
        printf("Masukkan pilihan: ");
        scanf("%d", &pilihan);

        // Variabel jumlahSaldoDitambahkan hanya dideklarasi ketika dibutuhkan
        switch (pilihan) {
            case 1: {
                double jumlahSaldoDitambahkan;
                printf("Masukkan jumlah saldo yang ingin diisi: ");
                scanf("%lf", &jumlahSaldoDitambahkan);

                // Tambahkan saldo pelanggan
                dataPelanggan[pelangganIndexLogin].saldo += jumlahSaldoDitambahkan;

                printf("Saldo berhasil diisi. Saldo sekarang: %.2lf\n", dataPelanggan[pelangganIndexLogin].saldo);
                break;
            }

            case 2:
                // Cek Saldo
                printf("Saldo pelanggan %s: %.2lf\n", dataPelanggan[pelangganIndexLogin].username,
                       dataPelanggan[pelangganIndexLogin].saldo);
                break;

            default:
                printf("Pilihan tidak valid.\n");
                break;
        }

        // Iterasi laundry untuk mengecek status dan mengurangi saldo jika selesai
        for (int i = 0; i < *jumlahLaundry; i++) {
            if (strcmp(dataPelanggan[pelangganIndexLogin].username, dataLaundry[i].jenis) == 0 &&
                dataLaundry[i].status == SELESAI) {
                // Kurangi saldo berdasarkan harga laundry yang sudah selesai
                dataPelanggan[pelangganIndexLogin].saldo -= dataLaundry[i].harga;
                printf("Saldo berkurang setelah laundry selesai. Saldo sekarang: %.2lf\n",
                       dataPelanggan[pelangganIndexLogin].saldo);
            }
        }
    } else {
        printf("Anda belum login sebagai pelanggan.\n");
    }
}


// Modifikasi fungsi setorLaundry
void setorLaundry(Pelanggan *dataPelanggan, Laundry *dataLaundry, int jumlahPelanggan, int *jumlahLaundry) {
    if (pelangganIndexLogin == -1) {
        printf("Anda belum login sebagai pelanggan. Silakan login terlebih dahulu.\n");
        return;
    }

    if (dataPelanggan[pelangganIndexLogin].saldo <= 0) {
        printf("Saldo tidak mencukupi untuk melakukan laundry.\n");
        return;
    }

    if (*jumlahLaundry >= MAX_LAUNDRY) {
        printf("Kapasitas laundry penuh. Tidak dapat menyetor laundry lebih banyak.\n");
        return;
    }

    // Memasukkan username pelanggan ke dalam dataLaundry
    strcpy(dataLaundry[*jumlahLaundry].username, dataPelanggan[pelangganIndexLogin].username);

    printf("Durasi laundry (dalam hari): ");
    scanf("%d", &dataLaundry[*jumlahLaundry].durasi);
    printf("Berat laundry (dalam kilogram): ");
    scanf("%lf", &dataLaundry[*jumlahLaundry].berat);

    // Menggunakan switch case untuk menentukan hargaPerKilogram berdasarkan jenisLaundry
    printf("Pilih jenis laundry:\n");
    printf("===Cuci Kiloan===\n");
    printf("1. Cuci Kiloan Reguler\n");
    printf("2. Cuci Kiloan Express\n");
    printf("===HouseHold===\n");
    printf("3. Sprei/Selimut/Sarung Bantal & Guling\n");
    printf("4. Bed Cover Kecil\n");
    printf("5. Bed Cover Sedang\n");
    printf("6. Bed Cover Besar\n");
    int jenis;
    printf("Masukkan nomor jenis laundry: ");
    scanf("%d", &jenis);

    double hargaPerKilogram;
    switch (jenis) {
    case 1:
        hargaPerKilogram = 6000.0;
        strcpy(dataLaundry[*jumlahLaundry].jenis, "Cuci Kiloan Reguler");
        break;
    case 2:
        hargaPerKilogram = 8000.0;
        strcpy(dataLaundry[*jumlahLaundry].jenis, "Cuci Kiloan Express");
        break;
    case 3:
        hargaPerKilogram = 15000.0;
        strcpy(dataLaundry[*jumlahLaundry].jenis, "Sprei/Selimut/Sarung Bantal & Guling");
        break;
    case 4:
        hargaPerKilogram = 10000.0;
        strcpy(dataLaundry[*jumlahLaundry].jenis, "Bed Cover Kecil");
        break;
    case 5:
        hargaPerKilogram = 13000.0;
        strcpy(dataLaundry[*jumlahLaundry].jenis, "Bed Cover Sedang");
        break;
    case 6:
        hargaPerKilogram = 16000.0;
        strcpy(dataLaundry[*jumlahLaundry].jenis, "Bed Cover Besar");
        break;
    default:
        printf("Nomor jenis laundry tidak valid.\n");
        return;
    }

    // Hitung harga total setelah hargaPerKilogram dihitung
    dataLaundry[*jumlahLaundry].harga = dataLaundry[*jumlahLaundry].berat * hargaPerKilogram;

    dataLaundry[*jumlahLaundry].status = BELUM_DIKONFIRMASI;

    dataPelanggan[pelangganIndexLogin].saldo -= dataLaundry[*jumlahLaundry].harga;
    printf("Laundry berhasil disetor. Harga laundry: %.2lf\n", dataLaundry[*jumlahLaundry].harga);

    simpanDataLaundry(dataLaundry, *jumlahLaundry + 1);

    (*jumlahLaundry)++;
}

// Modifikasi fungsi lihatStatusLaundry
void lihatStatusLaundry(Pelanggan *dataPelanggan, Laundry *dataLaundry, int jumlahPelanggan, int jumlahLaundry) {
    if (pelangganIndexLogin == -1) {
        printf("Anda belum login sebagai pelanggan. Silakan login terlebih dahulu.\n");
        return;
    }

    printf("Status Laundry untuk Pelanggan %s:\n", dataPelanggan[pelangganIndexLogin].username);

    for (int i = 0; i < jumlahLaundry; i++) {
        // Membandingkan username pelanggan dengan dataLaundry
        if (strcmp(dataPelanggan[pelangganIndexLogin].username, dataLaundry[i].username) == 0) {
            printf("Laundry %d:\n", i + 1);
            printf("Jenis: %s\n", dataLaundry[i].jenis);
            printf("Durasi: %d hari\n", dataLaundry[i].durasi);
            printf("Berat: %.2lf kg\n", dataLaundry[i].berat);
            printf("Harga: %.2lf\n", dataLaundry[i].harga);

            if (dataLaundry[i].status == BELUM_DIKONFIRMASI) {
                printf("Status: Belum dikonfirmasi\n");
            } else if (dataLaundry[i].status == SEDANG_DIKERJAKAN) {
                printf("Status: Sedang dikerjakan\n");
            } else {
                printf("Status: Selesai\n");
            }

            printf("\n");
        }
    }
}


void cekHarga() {
    printf("=== Cek Harga Laundry ===\n");
    printf("Pilih jenis laundry:\n");
    printf("===Cuci Kiloan===\n");
    printf("1. Cuci Kiloan Reguler\n");
    printf("2. Cuci Kiloan Express\n");
    printf("===HouseHold===\n");
    printf("3. Sprei/Selimut/Sarung Bantal & Guling\n");
    printf("4. Bed Cover Kecil\n");
    printf("5. Bed Cover Sedang\n");
    printf("6. Bed Cover Besar\n");

    int jenis;
    printf("Masukkan nomor jenis laundry: ");
    scanf("%d", &jenis);

    switch (jenis) {
        case 1:
            printf("Harga Cuci Kiloan Reguler: Rp. 6000.0 per kilogram\n");
            break;
        case 2:
            printf("Harga Cuci Kiloan Express: Rp. 8000.0 per kilogram\n");
            break;
        case 3:
            printf("Harga Sprei/Selimut/Sarung Bantal & Guling: Rp. 15000.0 per kilogram\n");
            break;
        case 4:
            printf("Harga Bed Cover Kecil: Rp. 10000.0 per kilogram\n");
            break;
        case 5:
            printf("Harga Bed Cover Sedang: Rp. 13000.0 per kilogram\n");
            break;
        case 6:
            printf("Harga Bed Cover Besar: Rp. 16000.0 per kilogram\n");
            break;
        default:
            printf("Nomor jenis laundry tidak valid.\n");
            break;
    }
}


void hapusPelanggan(Pelanggan *dataPelanggan, int *jumlahPelanggan) {
    char username[50];

    printf("Masukkan username pelanggan yang akan dihapus: ");
    scanf("%s", username);

    int indexPelanggan = -1;
    for (int i = 0; i < *jumlahPelanggan; i++) {
        if (strcmp(dataPelanggan[i].username, username) == 0) {
            indexPelanggan = i;
            break;
        }
    }

    if (indexPelanggan != -1) {
        // Menghapus akun pelanggan
        if (indexPelanggan < (*jumlahPelanggan) - 1) {
            memmove(&dataPelanggan[indexPelanggan], &dataPelanggan[indexPelanggan + 1],
                    ((*jumlahPelanggan) - indexPelanggan - 1) * sizeof(Pelanggan));
        }

        (*jumlahPelanggan)--;

        printf("Akun pelanggan %s berhasil dihapus.\n", username);
    } else {
        printf("Username pelanggan tidak ditemukan.\n");
    }
}


void lihatPendapatan(Laundry *dataLaundry, int jumlahLaundry) {
    double totalPendapatan = 0.0;

    for (int i = 0; i < jumlahLaundry; i++) {
        if (dataLaundry[i].status == SELESAI) {
            totalPendapatan += dataLaundry[i].harga;
        }
    }

    printf("Total Pendapatan: Rp. %.2f\n", totalPendapatan);
}


void perbaruiStatusLaundry(Laundry *dataLaundry, Pelanggan *dataPelanggan, int jumlahLaundry) {
    char username[50];

    printf("Masukkan username pelanggan: ");
    scanf("%s", username);

    int found = 0;
    for (int i = 0; i < jumlahLaundry; i++) {
        // Membandingkan username dengan dataLaundry
        if (strcmp(dataLaundry[i].username, username) == 0) {
            printf("Informasi Laundry Sebelum Diperbarui:\n");
            printf("Jenis: %s, Durasi: %d hari, Berat: %.2f kg, Harga: Rp. %.2f, Status: %d\n",
                   dataLaundry[i].jenis, dataLaundry[i].durasi, dataLaundry[i].berat,
                   dataLaundry[i].harga, dataLaundry[i].status);

            printf("Masukkan status baru (0: belum dikonfirmasi, 1: sedang dikerjakan, 2: selesai): ");
            scanf("%d", &dataLaundry[i].status);

            printf("Informasi Laundry Setelah Diperbarui:\n");
            printf("Jenis: %s, Durasi: %d hari, Berat: %.2f kg, Harga: Rp. %.2f, Status: %d\n",
                   dataLaundry[i].jenis, dataLaundry[i].durasi, dataLaundry[i].berat,
                   dataLaundry[i].harga, dataLaundry[i].status);

            printf("Status laundry pelanggan %s berhasil diperbarui.\n", username);
            found = 1;

            // Simpan perubahan status ke dalam file
            simpanDataLaundry(dataLaundry, jumlahLaundry);
        }
    }

    if (!found) {
        printf("Laundry untuk pelanggan %s tidak ditemukan.\n", username);
    }
}



void lihatHistoriPelanggan(Pelanggan *dataPelanggan, Laundry *dataLaundry, int jumlahPelanggan, int jumlahLaundry) {
    printf("Histori Laundry Pelanggan yang Sudah Selesai:\n");

    // Urutkan dataLaundry berdasarkan frekuensi selesai secara menurun
    for (int i = 0; i < jumlahLaundry - 1; i++) {
        for (int j = 0; j < jumlahLaundry - i - 1; j++) {
            if (dataLaundry[j].status == SELESAI && dataLaundry[j].frekuensi < dataLaundry[j + 1].frekuensi) {
                Laundry tempLaundry = dataLaundry[j];
                dataLaundry[j] = dataLaundry[j + 1];
                dataLaundry[j + 1] = tempLaundry;
            }
        }
    }

    for (int i = 0; i < jumlahLaundry; i++) {
        if (dataLaundry[i].status == SELESAI) {
            printf("Pelanggan: %s\n", dataLaundry[i].username);
            printf("Jenis: %s, Durasi: %d hari, Berat: %.2f kg, Harga: Rp. %.2f\n",
                   dataLaundry[i].jenis, dataLaundry[i].durasi, dataLaundry[i].berat,
                   dataLaundry[i].harga);
            printf("Status: Selesai\n");
            printf("\n");
        }
    }
}


void tampilkanMenuAdmin() {
    printf("Menu Admin:\n");
    printf("1. Hapus Akun Customer\n"); // UDAH
    printf("2. Lihat Pendapatan Laundry\n"); // UDAH
    printf("3. Perbarui Status Laundry Customer\n"); // UDAH
    printf("4. Lihat Histori Pelanggan\n"); // UDAH
    printf("5. Simpan dan Keluar\n"); 
    printf("Masukkan pilihan Anda: ");
}

void tampilkanMenuPelanggan() {
    printf("Menu Pelanggan:\n");
    printf("1. Isi Saldo\n"); // UDAH
    printf("2. Setor Laundry\n"); // UDAH
    printf("3. Lihat Status Laundry\n"); // UDAH
    printf("4. Cek Harga\n"); // UDAH
    printf("5. Simpan dan Keluar\n"); 
    printf("Masukkan pilihan Anda: ");
}
